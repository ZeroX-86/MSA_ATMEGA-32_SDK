
HAL_INTERRUPTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000242  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000002b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000916  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000689  00000000  00000000  00000c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a7  00000000  00000000  00001323  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000017cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004aa  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c9  00000000  00000000  00001d46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000210f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_interrrupts>:
  7c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  80:	81 11       	cpse	r24, r1
  82:	06 c0       	rjmp	.+12     	; 0x90 <init_interrrupts+0x14>
  84:	8f b7       	in	r24, 0x3f	; 63
  86:	80 68       	ori	r24, 0x80	; 128
  88:	8f bf       	out	0x3f, r24	; 63
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	08 95       	ret

00000094 <set_interrupt>:
  94:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
  98:	91 30       	cpi	r25, 0x01	; 1
  9a:	09 f0       	breq	.+2      	; 0x9e <set_interrupt+0xa>
  9c:	4e c0       	rjmp	.+156    	; 0x13a <set_interrupt+0xa6>
  9e:	9b ef       	ldi	r25, 0xFB	; 251
  a0:	98 0f       	add	r25, r24
  a2:	93 30       	cpi	r25, 0x03	; 3
  a4:	08 f0       	brcs	.+2      	; 0xa8 <set_interrupt+0x14>
  a6:	4b c0       	rjmp	.+150    	; 0x13e <set_interrupt+0xaa>
  a8:	64 30       	cpi	r22, 0x04	; 4
  aa:	08 f0       	brcs	.+2      	; 0xae <set_interrupt+0x1a>
  ac:	4a c0       	rjmp	.+148    	; 0x142 <set_interrupt+0xae>
  ae:	9b b7       	in	r25, 0x3b	; 59
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	08 2e       	mov	r0, r24
  b6:	02 c0       	rjmp	.+4      	; 0xbc <set_interrupt+0x28>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <set_interrupt+0x24>
  c0:	29 2b       	or	r18, r25
  c2:	2b bf       	out	0x3b, r18	; 59
  c4:	86 30       	cpi	r24, 0x06	; 6
  c6:	c1 f4       	brne	.+48     	; 0xf8 <set_interrupt+0x64>
  c8:	61 30       	cpi	r22, 0x01	; 1
  ca:	29 f4       	brne	.+10     	; 0xd6 <set_interrupt+0x42>
  cc:	85 b7       	in	r24, 0x35	; 53
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	85 bf       	out	0x35, r24	; 53
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	08 95       	ret
  d6:	62 30       	cpi	r22, 0x02	; 2
  d8:	29 f4       	brne	.+10     	; 0xe4 <set_interrupt+0x50>
  da:	85 b7       	in	r24, 0x35	; 53
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	85 bf       	out	0x35, r24	; 53
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	08 95       	ret
  e4:	63 30       	cpi	r22, 0x03	; 3
  e6:	29 f4       	brne	.+10     	; 0xf2 <set_interrupt+0x5e>
  e8:	85 b7       	in	r24, 0x35	; 53
  ea:	83 60       	ori	r24, 0x03	; 3
  ec:	85 bf       	out	0x35, r24	; 53
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	08 95       	ret
  f2:	92 9a       	sbi	0x12, 2	; 18
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 95       	ret
  f8:	87 30       	cpi	r24, 0x07	; 7
  fa:	c1 f4       	brne	.+48     	; 0x12c <set_interrupt+0x98>
  fc:	61 30       	cpi	r22, 0x01	; 1
  fe:	29 f4       	brne	.+10     	; 0x10a <set_interrupt+0x76>
 100:	85 b7       	in	r24, 0x35	; 53
 102:	84 60       	ori	r24, 0x04	; 4
 104:	85 bf       	out	0x35, r24	; 53
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 95       	ret
 10a:	62 30       	cpi	r22, 0x02	; 2
 10c:	29 f4       	brne	.+10     	; 0x118 <set_interrupt+0x84>
 10e:	85 b7       	in	r24, 0x35	; 53
 110:	88 60       	ori	r24, 0x08	; 8
 112:	85 bf       	out	0x35, r24	; 53
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	08 95       	ret
 118:	63 30       	cpi	r22, 0x03	; 3
 11a:	29 f4       	brne	.+10     	; 0x126 <set_interrupt+0x92>
 11c:	85 b7       	in	r24, 0x35	; 53
 11e:	8c 60       	ori	r24, 0x0C	; 12
 120:	85 bf       	out	0x35, r24	; 53
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	08 95       	ret
 126:	93 9a       	sbi	0x12, 3	; 18
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	08 95       	ret
 12c:	62 30       	cpi	r22, 0x02	; 2
 12e:	59 f4       	brne	.+22     	; 0x146 <set_interrupt+0xb2>
 130:	84 b7       	in	r24, 0x34	; 52
 132:	8f 7b       	andi	r24, 0xBF	; 191
 134:	84 bf       	out	0x34, r24	; 52
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	08 95       	ret
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	08 95       	ret
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	08 95       	ret
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	08 95       	ret
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	08 95       	ret

0000014a <deinit_interrrupts>:
 14a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	29 f4       	brne	.+10     	; 0x15c <deinit_interrrupts+0x12>
 152:	8f b7       	in	r24, 0x3f	; 63
 154:	8f 77       	andi	r24, 0x7F	; 127
 156:	8f bf       	out	0x3f, r24	; 63
 158:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	08 95       	ret

00000160 <main>:
#include <avr/interrupt.h>

int cntr=0;
int main(void)
{
	DDRA=0xff;
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	8a bb       	out	0x1a, r24	; 26
	DDRD=0x00;
 164:	11 ba       	out	0x11, r1	; 17
	DDRB=0xff;
 166:	87 bb       	out	0x17, r24	; 23
	//PORTD=0xff;
	DDRC=0xff;
 168:	84 bb       	out	0x14, r24	; 20
	//PORTD|=(1<<2);
	init_interrrupts();
 16a:	0e 94 3e 00 	call	0x7c	; 0x7c <init_interrrupts>
	set_interrupt(INTERRUPT0,RISING_EDGE);
 16e:	63 e0       	ldi	r22, 0x03	; 3
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	0e 94 4a 00 	call	0x94	; 0x94 <set_interrupt>
	//set_interrupt(INTERRUPT1,RISING_EDGE);
    while (1) 
    {
		PORTA=0xff;
 176:	1f ef       	ldi	r17, 0xFF	; 255
		if (cntr >= 2)
		{
			
			deinit_interrrupts();
	}
	PORTB=cntr;
 178:	c1 e6       	ldi	r28, 0x61	; 97
 17a:	d0 e0       	ldi	r29, 0x00	; 0
	init_interrrupts();
	set_interrupt(INTERRUPT0,RISING_EDGE);
	//set_interrupt(INTERRUPT1,RISING_EDGE);
    while (1) 
    {
		PORTA=0xff;
 17c:	1b bb       	out	0x1b, r17	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	83 e2       	ldi	r24, 0x23	; 35
 180:	94 ef       	ldi	r25, 0xF4	; 244
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0x22>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x28>
 188:	00 00       	nop
		_delay_ms(250);
		PORTA=0x00;
 18a:	1b ba       	out	0x1b, r1	; 27
 18c:	83 e2       	ldi	r24, 0x23	; 35
 18e:	94 ef       	ldi	r25, 0xF4	; 244
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0x30>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x36>
 196:	00 00       	nop
		_delay_ms(250);
		if (cntr >= 2)
 198:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <cntr>
 19c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <cntr+0x1>
 1a0:	02 97       	sbiw	r24, 0x02	; 2
 1a2:	14 f0       	brlt	.+4      	; 0x1a8 <main+0x48>
		{
			
			deinit_interrrupts();
 1a4:	0e 94 a5 00 	call	0x14a	; 0x14a <deinit_interrrupts>
	}
	PORTB=cntr;
 1a8:	88 81       	ld	r24, Y
 1aa:	88 bb       	out	0x18, r24	; 24
	}
 1ac:	e7 cf       	rjmp	.-50     	; 0x17c <main+0x1c>

000001ae <__vector_1>:
}
//void INT0_vect(void)
ISR(INT0_vect)
{
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	2f 93       	push	r18
 1ba:	3f 93       	push	r19
 1bc:	4f 93       	push	r20
 1be:	5f 93       	push	r21
 1c0:	6f 93       	push	r22
 1c2:	7f 93       	push	r23
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
 1cc:	ef 93       	push	r30
 1ce:	ff 93       	push	r31
	//sei();//testing the nested interrupt>>>clear if dont wanna 
	//init_interrrupts();
	*((volatile unsigned char *)0x35)=0xff;
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	85 bb       	out	0x15, r24	; 21
 1d4:	2f e9       	ldi	r18, 0x9F	; 159
 1d6:	86 e8       	ldi	r24, 0x86	; 134
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <__vector_1+0x2c>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <__vector_1+0x36>
 1e4:	00 00       	nop
	_delay_ms(500);
	*((volatile unsigned char *)0x35)=0x00;
 1e6:	15 ba       	out	0x15, r1	; 21
 1e8:	2f e9       	ldi	r18, 0x9F	; 159
 1ea:	86 e8       	ldi	r24, 0x86	; 134
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <__vector_1+0x40>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <__vector_1+0x4a>
 1f8:	00 00       	nop
	_delay_ms(500);
	//PORTB=cntr;
	if (cntr >= 2)
 1fa:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <cntr>
 1fe:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <cntr+0x1>
 202:	02 97       	sbiw	r24, 0x02	; 2
 204:	14 f0       	brlt	.+4      	; 0x20a <__vector_1+0x5c>
	{
		
		deinit_interrrupts();
 206:	0e 94 a5 00 	call	0x14a	; 0x14a <deinit_interrrupts>
		
	}
	cntr++;
 20a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <cntr>
 20e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <cntr+0x1>
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <cntr+0x1>
 218:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <cntr>
}
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	bf 91       	pop	r27
 222:	af 91       	pop	r26
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	7f 91       	pop	r23
 22a:	6f 91       	pop	r22
 22c:	5f 91       	pop	r21
 22e:	4f 91       	pop	r20
 230:	3f 91       	pop	r19
 232:	2f 91       	pop	r18
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
